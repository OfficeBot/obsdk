{"version":3,"sources":["dist/node_modules/browser-pack/_prelude.js","dist/index.js","dist/node_modules/base64-js/index.js","dist/node_modules/buffer/index.js","dist/node_modules/clone/clone.js","dist/node_modules/deep-equal/index.js","dist/node_modules/deep-equal/lib/is_arguments.js","dist/node_modules/deep-equal/lib/keys.js","dist/node_modules/fast-json-patch/lib/core.js","dist/node_modules/fast-json-patch/lib/duplex.js","dist/node_modules/fast-json-patch/lib/helpers.js","dist/node_modules/ieee754/index.js","dist/node_modules/querystring-es3/decode.js","dist/node_modules/querystring-es3/encode.js","dist/node_modules/querystring-es3/index.js","dist/src/api-config.class.js","dist/src/cache.class.js","dist/src/endpoint-config.class.js","dist/src/endpoint.class.js","dist/src/http-mock.class.js","dist/src/model.class.js","dist/src/request.class.js","dist/src/settings.js","dist/src/transport.class.js","dist/src/url-builder.class.js","dist/src/utils.class.js"],"names":[],"mappings":"AAAA;;;ACAA;;;;AAIA,IAAI,MAAO,UAAS,OAAT,EAAkB;;AAE3B,MAAI,WAAW,QAAQ,mBAAR,CAAf;AACA,WAAS,aAAT,CAAuB,OAAvB;;AAEA,MAAI,UAAU;AACZ,SAAkB,QAAQ,wBAAR,CADN;AAEZ,WAAkB,QAAQ,mBAAR,CAFN;AAGZ,oBAAkB,QAAQ,6BAAR,CAHN;AAIZ,cAAkB,QAAQ,sBAAR,CAJN;AAKZ,cAAkB,QAAQ,uBAAR,CALN;AAMZ,WAAkB,QAAQ,mBAAR,CANN;AAOZ,aAAkB,QAAQ,qBAAR,CAPN;AAQZ,cAAkB,QARN;AASZ,cAAkB,QAAQ,uBAAR,CATN;AAUZ,gBAAkB,QAAQ,yBAAR,CAVN;AAWZ,WAAkB,QAAQ,mBAAR;AAXN,GAAd;;AAcA,SAAO,OAAP;AAED,CArBS,CAqBP,OArBO,CAAV;;AAuBA,OAAO,OAAP,GAAiB,GAAjllrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC3PA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpptpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;;;;;;;;ACJA,IAAM,iBAAiB,QAAQ,4BAAR,CAAvB;AACA,IAAM,WAAW,QAAQ,qBAAR,CAAjB;AACA,IAAM,QAAQ,QAAQ,eAAR,CAAd;AACA,IAAM,QAAQ,QAAQ,eAAR,EAAyB,KAAvC;;AAEA;;;;;IAIM,S;AACJ,uBAAc;AAAA;;AACZ,SAAK,MAAL,GAAc,EAAE,SAAU,EAAZ,EAAgB,KAAM,EAAtB,EAAd;AACA,SAAK,SAAL,GAAiB,EAAjB;AACA,SAAK,KAAL,GAAa,IAAI,KAAJ,EAAb;AACD;AACD;;;;;;;;;4BAKQ,G,EAAK;AACX,UAAI,gBAAgB,OAAO,GAA3B,EAAgC;AAC9B,YAAI,aAAa,OAAO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","file":"officebot-sdk.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * This creates a simple package that can be exported\n * @namespace OfficeBotSDK.Index\n */\nlet SDK = (function(Promise) {\n\n  let Settings = require('./src/settings.js');\n  Settings.setPromiseLib(Promise);\n\n  let exports = {\n    API             : require('./src/api-config.class'),\n    Cache           : require('./src/cache.class'),\n    EndpointConfig  : require('./src/endpoint-config.class'),\n    Endpoint        : require('./src/endpoint.class'),\n    HTTPMock        : require('./src/http-mock.class'),\n    Model           : require('./src/model.class'),\n    Request         : require('./src/request.class'),\n    Settings        : Settings,\n    Tranport        : require('./src/transport.class'),\n    URLBuilder      : require('./src/url-builder.class'),\n    Utils           : require('./src/utils.class')\n  };\n\n  return exports;\n\n})(Promise);\n\nmodule.exports = SDK;","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return (b64.length * 3 / 4) - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr((len * 3 / 4) - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0; i < l; i += 4) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('Invalid typed array length')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nif (typeof Symbol !== 'undefined' && Symbol.species &&\n    Buffer[Symbol.species] === Buffer) {\n  Object.defineProperty(Buffer, Symbol.species, {\n    value: null,\n    configurable: true,\n    enumerable: false,\n    writable: false\n  })\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (isArrayBuffer(value)) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  return fromObject(value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nBuffer.prototype.__proto__ = Uint8Array.prototype\nBuffer.__proto__ = Uint8Array\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj) {\n    if (isArrayBufferView(obj) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n        return createBuffer(0)\n      }\n      return fromArrayLike(obj)\n    }\n\n    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n      return fromArrayLike(obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (isArrayBufferView(string) || isArrayBuffer(string)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  newBuf.__proto__ = Buffer.prototype\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : new Buffer(val, encoding)\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check\n// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166\nfunction isArrayBuffer (obj) {\n  return obj instanceof ArrayBuffer ||\n    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&\n      typeof obj.byteLength === 'number')\n}\n\n// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`\nfunction isArrayBufferView (obj) {\n  return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)\n}\n\nfunction numberIsNaN (obj) {\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n","var clone = (function() {\n'use strict';\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nvar nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nvar nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nvar nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  var allParents = [];\n  var allChildren = [];\n\n  var useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    var child;\n    var proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      child = new Buffer(parent.length);\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      var index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      parent.forEach(function(value, key) {\n        var keyChild = _clone(key, depth - 1);\n        var valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      parent.forEach(function(value) {\n        var entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (var i in parent) {\n      var attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(parent);\n      for (var i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        var symbol = symbols[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      var allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (var i = 0; i < allPropertyNames.length; i++) {\n        var propertyName = allPropertyNames[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  var c = function () {};\n  c.prototype = parent;\n  return new c();\n};\n\n// private utility functions\n\nfunction __objToStr(o) {\n  return Object.prototype.toString.call(o);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(re) {\n  var flags = '';\n  if (re.global) flags += 'g';\n  if (re.ignoreCase) flags += 'i';\n  if (re.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n})();\n\nif (typeof module === 'object' && module.exports) {\n  module.exports = clone;\n}\n","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n","var equalsOptions = { strict: true };\r\nvar _equals = require('deep-equal');\r\nvar areEquals = function (a, b) {\r\n    return _equals(a, b, equalsOptions);\r\n};\r\nvar helpers_1 = require('./helpers');\r\nexports.JsonPatchError = helpers_1.PatchError;\r\nexports.deepClone = helpers_1._deepClone;\r\n/* We use a Javascript hash to store each\r\n function. Each hash entry (property) uses\r\n the operation identifiers specified in rfc6902.\r\n In this way, we can map each patch operation\r\n to its dedicated function in efficient way.\r\n */\r\n/* The operations applicable to an object */\r\nvar objOps = {\r\n    add: function (obj, key, document) {\r\n        obj[key] = this.value;\r\n        return { newDocument: document };\r\n    },\r\n    remove: function (obj, key, document) {\r\n        var removed = obj[key];\r\n        delete obj[key];\r\n        return { newDocument: document, removed: removed };\r\n    },\r\n    replace: function (obj, key, document) {\r\n        var removed = obj[key];\r\n        obj[key] = this.value;\r\n        return { newDocument: document, removed: removed };\r\n    },\r\n    move: function (obj, key, document) {\r\n        /* in case move target overwrites an existing value,\r\n        return the removed value, this can be taxing performance-wise,\r\n        and is potentially unneeded */\r\n        var removed = getValueByPointer(document, this.path);\r\n        if (removed) {\r\n            removed = helpers_1._deepClone(removed);\r\n        }\r\n        var originalValue = applyOperation(document, { op: \"remove\", path: this.from }).removed;\r\n        applyOperation(document, { op: \"add\", path: this.path, value: originalValue });\r\n        return { newDocument: document, removed: removed };\r\n    },\r\n    copy: function (obj, key, document) {\r\n        var valueToCopy = getValueByPointer(document, this.from);\r\n        // enforce copy by value so further operations don't affect source (see issue #177)\r\n        applyOperation(document, { op: \"add\", path: this.path, value: helpers_1._deepClone(valueToCopy) });\r\n        return { newDocument: document };\r\n    },\r\n    test: function (obj, key, document) {\r\n        return { newDocument: document, test: areEquals(obj[key], this.value) };\r\n    },\r\n    _get: function (obj, key, document) {\r\n        this.value = obj[key];\r\n        return { newDocument: document };\r\n    }\r\n};\r\n/* The operations applicable to an array. Many are the same as for the object */\r\nvar arrOps = {\r\n    add: function (arr, i, document) {\r\n        if (helpers_1.isInteger(i)) {\r\n            arr.splice(i, 0, this.value);\r\n        }\r\n        else {\r\n            arr[i] = this.value;\r\n        }\r\n        // this may be needed when using '-' in an array\r\n        return { newDocument: document, index: i };\r\n    },\r\n    remove: function (arr, i, document) {\r\n        var removedList = arr.splice(i, 1);\r\n        return { newDocument: document, removed: removedList[0] };\r\n    },\r\n    replace: function (arr, i, document) {\r\n        var removed = arr[i];\r\n        arr[i] = this.value;\r\n        return { newDocument: document, removed: removed };\r\n    },\r\n    move: objOps.move,\r\n    copy: objOps.copy,\r\n    test: objOps.test,\r\n    _get: objOps._get\r\n};\r\n/**\r\n * Retrieves a value from a JSON document by a JSON pointer.\r\n * Returns the value.\r\n *\r\n * @param document The document to get the value from\r\n * @param pointer an escaped JSON pointer\r\n * @return The retrieved value\r\n */\r\nfunction getValueByPointer(document, pointer) {\r\n    if (pointer == '') {\r\n        return document;\r\n    }\r\n    var getOriginalDestination = { op: \"_get\", path: pointer };\r\n    applyOperation(document, getOriginalDestination);\r\n    return getOriginalDestination.value;\r\n}\r\nexports.getValueByPointer = getValueByPointer;\r\n/**\r\n * Apply a single JSON Patch Operation on a JSON document.\r\n * Returns the {newDocument, result} of the operation.\r\n * It modifies the `document` and `operation` objects - it gets the values by reference.\r\n * If you would like to avoid touching your values, clone them:\r\n * `jsonpatch.applyOperation(document, jsonpatch._deepClone(operation))`.\r\n *\r\n * @param document The document to patch\r\n * @param operation The operation to apply\r\n * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.\r\n * @param mutateDocument Whether to mutate the original document or clone it before applying\r\n * @return `{newDocument, result}` after the operation\r\n */\r\nfunction applyOperation(document, operation, validateOperation, mutateDocument) {\r\n    if (validateOperation === void 0) { validateOperation = false; }\r\n    if (mutateDocument === void 0) { mutateDocument = true; }\r\n    if (validateOperation) {\r\n        if (typeof validateOperation == 'function') {\r\n            validateOperation(operation, 0, document, operation.path);\r\n        }\r\n        else {\r\n            validator(operation, 0);\r\n        }\r\n    }\r\n    /* ROOT OPERATIONS */\r\n    if (operation.path === \"\") {\r\n        var returnValue = { newDocument: document };\r\n        if (operation.op === 'add') {\r\n            returnValue.newDocument = operation.value;\r\n            return returnValue;\r\n        }\r\n        else if (operation.op === 'replace') {\r\n            returnValue.newDocument = operation.value;\r\n            returnValue.removed = document; //document we removed\r\n            return returnValue;\r\n        }\r\n        else if (operation.op === 'move' || operation.op === 'copy') {\r\n            returnValue.newDocument = getValueByPointer(document, operation.from); // get the value by json-pointer in `from` field\r\n            if (operation.op === 'move') {\r\n                returnValue.removed = document;\r\n            }\r\n            return returnValue;\r\n        }\r\n        else if (operation.op === 'test') {\r\n            returnValue.test = areEquals(document, operation.value);\r\n            if (returnValue.test === false) {\r\n                throw new exports.JsonPatchError(\"Test operation failed\", 'TEST_OPERATION_FAILED', 0, operation, document);\r\n            }\r\n            returnValue.newDocument = document;\r\n            return returnValue;\r\n        }\r\n        else if (operation.op === 'remove') {\r\n            returnValue.removed = document;\r\n            returnValue.newDocument = null;\r\n            return returnValue;\r\n        }\r\n        else if (operation.op === '_get') {\r\n            operation.value = document;\r\n            return returnValue;\r\n        }\r\n        else {\r\n            if (validateOperation) {\r\n                throw new exports.JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902', 'OPERATION_OP_INVALID', 0, operation, document);\r\n            }\r\n            else {\r\n                return returnValue;\r\n            }\r\n        }\r\n    } /* END ROOT OPERATIONS */\r\n    else {\r\n        if (!mutateDocument) {\r\n            document = helpers_1._deepClone(document);\r\n        }\r\n        var path = operation.path || \"\";\r\n        var keys = path.split('/');\r\n        var obj = document;\r\n        var t = 1; //skip empty element - http://jsperf.com/to-shift-or-not-to-shift\r\n        var len = keys.length;\r\n        var existingPathFragment = undefined;\r\n        var key = void 0;\r\n        var validateFunction = void 0;\r\n        if (typeof validateOperation == 'function') {\r\n            validateFunction = validateOperation;\r\n        }\r\n        else {\r\n            validateFunction = validator;\r\n        }\r\n        while (true) {\r\n            key = keys[t];\r\n            if (validateOperation) {\r\n                if (existingPathFragment === undefined) {\r\n                    if (obj[key] === undefined) {\r\n                        existingPathFragment = keys.slice(0, t).join('/');\r\n                    }\r\n                    else if (t == len - 1) {\r\n                        existingPathFragment = operation.path;\r\n                    }\r\n                    if (existingPathFragment !== undefined) {\r\n                        validateFunction(operation, 0, document, existingPathFragment);\r\n                    }\r\n                }\r\n            }\r\n            t++;\r\n            if (Array.isArray(obj)) {\r\n                if (key === '-') {\r\n                    key = obj.length;\r\n                }\r\n                else {\r\n                    if (validateOperation && !helpers_1.isInteger(key)) {\r\n                        throw new exports.JsonPatchError(\"Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index\", \"OPERATION_PATH_ILLEGAL_ARRAY_INDEX\", 0, operation.path, operation);\r\n                    } // only parse key when it's an integer for `arr.prop` to work\r\n                    else if (helpers_1.isInteger(key)) {\r\n                        key = ~~key;\r\n                    }\r\n                }\r\n                if (t >= len) {\r\n                    if (validateOperation && operation.op === \"add\" && key > obj.length) {\r\n                        throw new exports.JsonPatchError(\"The specified index MUST NOT be greater than the number of elements in the array\", \"OPERATION_VALUE_OUT_OF_BOUNDS\", 0, operation.path, operation);\r\n                    }\r\n                    var returnValue = arrOps[operation.op].call(operation, obj, key, document); // Apply patch\r\n                    if (returnValue.test === false) {\r\n                        throw new exports.JsonPatchError(\"Test operation failed\", 'TEST_OPERATION_FAILED', 0, operation, document);\r\n                    }\r\n                    return returnValue;\r\n                }\r\n            }\r\n            else {\r\n                if (key && key.indexOf('~') != -1) {\r\n                    key = helpers_1.unescapePathComponent(key);\r\n                }\r\n                if (t >= len) {\r\n                    var returnValue = objOps[operation.op].call(operation, obj, key, document); // Apply patch\r\n                    if (returnValue.test === false) {\r\n                        throw new exports.JsonPatchError(\"Test operation failed\", 'TEST_OPERATION_FAILED', 0, operation, document);\r\n                    }\r\n                    return returnValue;\r\n                }\r\n            }\r\n            obj = obj[key];\r\n        }\r\n    }\r\n}\r\nexports.applyOperation = applyOperation;\r\n/**\r\n * Apply a full JSON Patch array on a JSON document.\r\n * Returns the {newDocument, result} of the patch.\r\n * It modifies the `document` object and `patch` - it gets the values by reference.\r\n * If you would like to avoid touching your values, clone them:\r\n * `jsonpatch.applyPatch(document, jsonpatch._deepClone(patch))`.\r\n *\r\n * @param document The document to patch\r\n * @param patch The patch to apply\r\n * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.\r\n * @return An array of `{newDocument, result}` after the patch\r\n */\r\nfunction applyPatch(document, patch, validateOperation) {\r\n    if (validateOperation) {\r\n        if (!Array.isArray(patch)) {\r\n            throw new exports.JsonPatchError('Patch sequence must be an array', 'SEQUENCE_NOT_AN_ARRAY');\r\n        }\r\n    }\r\n    var results = new Array(patch.length);\r\n    for (var i = 0, length_1 = patch.length; i < length_1; i++) {\r\n        results[i] = applyOperation(document, patch[i], validateOperation);\r\n        document = results[i].newDocument; // in case root was replaced\r\n    }\r\n    results.newDocument = document;\r\n    return results;\r\n}\r\nexports.applyPatch = applyPatch;\r\n/**\r\n * Apply a single JSON Patch Operation on a JSON document.\r\n * Returns the updated document.\r\n * Suitable as a reducer.\r\n *\r\n * @param document The document to patch\r\n * @param operation The operation to apply\r\n * @return The updated document\r\n */\r\nfunction applyReducer(document, operation) {\r\n    var operationResult = applyOperation(document, operation);\r\n    if (operationResult.test === false) {\r\n        throw new exports.JsonPatchError(\"Test operation failed\", 'TEST_OPERATION_FAILED', 0, operation, document);\r\n    }\r\n    return operationResult.newDocument;\r\n}\r\nexports.applyReducer = applyReducer;\r\n/**\r\n * Validates a single operation. Called from `jsonpatch.validate`. Throws `JsonPatchError` in case of an error.\r\n * @param {object} operation - operation object (patch)\r\n * @param {number} index - index of operation in the sequence\r\n * @param {object} [document] - object where the operation is supposed to be applied\r\n * @param {string} [existingPathFragment] - comes along with `document`\r\n */\r\nfunction validator(operation, index, document, existingPathFragment) {\r\n    if (typeof operation !== 'object' || operation === null || Array.isArray(operation)) {\r\n        throw new exports.JsonPatchError('Operation is not an object', 'OPERATION_NOT_AN_OBJECT', index, operation, document);\r\n    }\r\n    else if (!objOps[operation.op]) {\r\n        throw new exports.JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902', 'OPERATION_OP_INVALID', index, operation, document);\r\n    }\r\n    else if (typeof operation.path !== 'string') {\r\n        throw new exports.JsonPatchError('Operation `path` property is not a string', 'OPERATION_PATH_INVALID', index, operation, document);\r\n    }\r\n    else if (operation.path.indexOf('/') !== 0 && operation.path.length > 0) {\r\n        // paths that aren't empty string should start with \"/\"\r\n        throw new exports.JsonPatchError('Operation `path` property must start with \"/\"', 'OPERATION_PATH_INVALID', index, operation, document);\r\n    }\r\n    else if ((operation.op === 'move' || operation.op === 'copy') && typeof operation.from !== 'string') {\r\n        throw new exports.JsonPatchError('Operation `from` property is not present (applicable in `move` and `copy` operations)', 'OPERATION_FROM_REQUIRED', index, operation, document);\r\n    }\r\n    else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && operation.value === undefined) {\r\n        throw new exports.JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_REQUIRED', index, operation, document);\r\n    }\r\n    else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && helpers_1.hasUndefined(operation.value)) {\r\n        throw new exports.JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED', index, operation, document);\r\n    }\r\n    else if (document) {\r\n        if (operation.op == \"add\") {\r\n            var pathLen = operation.path.split(\"/\").length;\r\n            var existingPathLen = existingPathFragment.split(\"/\").length;\r\n            if (pathLen !== existingPathLen + 1 && pathLen !== existingPathLen) {\r\n                throw new exports.JsonPatchError('Cannot perform an `add` operation at the desired path', 'OPERATION_PATH_CANNOT_ADD', index, operation, document);\r\n            }\r\n        }\r\n        else if (operation.op === 'replace' || operation.op === 'remove' || operation.op === '_get') {\r\n            if (operation.path !== existingPathFragment) {\r\n                throw new exports.JsonPatchError('Cannot perform the operation at a path that does not exist', 'OPERATION_PATH_UNRESOLVABLE', index, operation, document);\r\n            }\r\n        }\r\n        else if (operation.op === 'move' || operation.op === 'copy') {\r\n            var existingValue = { op: \"_get\", path: operation.from, value: undefined };\r\n            var error = validate([existingValue], document);\r\n            if (error && error.name === 'OPERATION_PATH_UNRESOLVABLE') {\r\n                throw new exports.JsonPatchError('Cannot perform the operation from a path that does not exist', 'OPERATION_FROM_UNRESOLVABLE', index, operation, document);\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.validator = validator;\r\n/**\r\n * Validates a sequence of operations. If `document` parameter is provided, the sequence is additionally validated against the object document.\r\n * If error is encountered, returns a JsonPatchError object\r\n * @param sequence\r\n * @param document\r\n * @returns {JsonPatchError|undefined}\r\n */\r\nfunction validate(sequence, document, externalValidator) {\r\n    try {\r\n        if (!Array.isArray(sequence)) {\r\n            throw new exports.JsonPatchError('Patch sequence must be an array', 'SEQUENCE_NOT_AN_ARRAY');\r\n        }\r\n        if (document) {\r\n            //clone document and sequence so that we can safely try applying operations\r\n            applyPatch(helpers_1._deepClone(document), helpers_1._deepClone(sequence), externalValidator || true);\r\n        }\r\n        else {\r\n            externalValidator = externalValidator || validator;\r\n            for (var i = 0; i < sequence.length; i++) {\r\n                externalValidator(sequence[i], i, document, undefined);\r\n            }\r\n        }\r\n    }\r\n    catch (e) {\r\n        if (e instanceof exports.JsonPatchError) {\r\n            return e;\r\n        }\r\n        else {\r\n            throw e;\r\n        }\r\n    }\r\n}\r\nexports.validate = validate;\r\n","var equalsOptions = { strict: true };\r\nvar _equals = require('deep-equal');\r\nvar areEquals = function (a, b) {\r\n    return _equals(a, b, equalsOptions);\r\n};\r\nvar helpers_1 = require('./helpers');\r\nvar core_1 = require('./core');\r\n/* export all core functions */\r\nvar core_2 = require('./core');\r\nexports.applyOperation = core_2.applyOperation;\r\nexports.applyPatch = core_2.applyPatch;\r\nexports.applyReducer = core_2.applyReducer;\r\nexports.getValueByPointer = core_2.getValueByPointer;\r\nexports.validate = core_2.validate;\r\nexports.validator = core_2.validator;\r\n/* export some helpers */\r\nvar helpers_2 = require('./helpers');\r\nexports.JsonPatchError = helpers_2.PatchError;\r\nexports.deepClone = helpers_2._deepClone;\r\nexports.escapePathComponent = helpers_2.escapePathComponent;\r\nexports.unescapePathComponent = helpers_2.unescapePathComponent;\r\nvar beforeDict = [];\r\nvar Mirror = (function () {\r\n    function Mirror(obj) {\r\n        this.observers = [];\r\n        this.obj = obj;\r\n    }\r\n    return Mirror;\r\n}());\r\nvar ObserverInfo = (function () {\r\n    function ObserverInfo(callback, observer) {\r\n        this.callback = callback;\r\n        this.observer = observer;\r\n    }\r\n    return ObserverInfo;\r\n}());\r\nfunction getMirror(obj) {\r\n    for (var i = 0, length = beforeDict.length; i < length; i++) {\r\n        if (beforeDict[i].obj === obj) {\r\n            return beforeDict[i];\r\n        }\r\n    }\r\n}\r\nfunction getObserverFromMirror(mirror, callback) {\r\n    for (var j = 0, length = mirror.observers.length; j < length; j++) {\r\n        if (mirror.observers[j].callback === callback) {\r\n            return mirror.observers[j].observer;\r\n        }\r\n    }\r\n}\r\nfunction removeObserverFromMirror(mirror, observer) {\r\n    for (var j = 0, length = mirror.observers.length; j < length; j++) {\r\n        if (mirror.observers[j].observer === observer) {\r\n            mirror.observers.splice(j, 1);\r\n            return;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Detach an observer from an object\r\n */\r\nfunction unobserve(root, observer) {\r\n    observer.unobserve();\r\n}\r\nexports.unobserve = unobserve;\r\n/**\r\n * Observes changes made to an object, which can then be retrieved using generate\r\n */\r\nfunction observe(obj, callback) {\r\n    var patches = [];\r\n    var root = obj;\r\n    var observer;\r\n    var mirror = getMirror(obj);\r\n    if (!mirror) {\r\n        mirror = new Mirror(obj);\r\n        beforeDict.push(mirror);\r\n    }\r\n    else {\r\n        observer = getObserverFromMirror(mirror, callback);\r\n    }\r\n    if (observer) {\r\n        return observer;\r\n    }\r\n    observer = {};\r\n    mirror.value = helpers_1._deepClone(obj);\r\n    if (callback) {\r\n        observer.callback = callback;\r\n        observer.next = null;\r\n        var dirtyCheck = function () {\r\n            generate(observer);\r\n        };\r\n        var fastCheck = function () {\r\n            clearTimeout(observer.next);\r\n            observer.next = setTimeout(dirtyCheck);\r\n        };\r\n        if (typeof window !== 'undefined') {\r\n            if (window.addEventListener) {\r\n                window.addEventListener('mouseup', fastCheck);\r\n                window.addEventListener('keyup', fastCheck);\r\n                window.addEventListener('mousedown', fastCheck);\r\n                window.addEventListener('keydown', fastCheck);\r\n                window.addEventListener('change', fastCheck);\r\n            }\r\n            else {\r\n                document.documentElement.attachEvent('onmouseup', fastCheck);\r\n                document.documentElement.attachEvent('onkeyup', fastCheck);\r\n                document.documentElement.attachEvent('onmousedown', fastCheck);\r\n                document.documentElement.attachEvent('onkeydown', fastCheck);\r\n                document.documentElement.attachEvent('onchange', fastCheck);\r\n            }\r\n        }\r\n    }\r\n    observer.patches = patches;\r\n    observer.object = obj;\r\n    observer.unobserve = function () {\r\n        generate(observer);\r\n        clearTimeout(observer.next);\r\n        removeObserverFromMirror(mirror, observer);\r\n        if (typeof window !== 'undefined') {\r\n            if (window.removeEventListener) {\r\n                window.removeEventListener('mouseup', fastCheck);\r\n                window.removeEventListener('keyup', fastCheck);\r\n                window.removeEventListener('mousedown', fastCheck);\r\n                window.removeEventListener('keydown', fastCheck);\r\n            }\r\n            else {\r\n                document.documentElement.detachEvent('onmouseup', fastCheck);\r\n                document.documentElement.detachEvent('onkeyup', fastCheck);\r\n                document.documentElement.detachEvent('onmousedown', fastCheck);\r\n                document.documentElement.detachEvent('onkeydown', fastCheck);\r\n            }\r\n        }\r\n    };\r\n    mirror.observers.push(new ObserverInfo(callback, observer));\r\n    return observer;\r\n}\r\nexports.observe = observe;\r\n/**\r\n * Generate an array of patches from an observer\r\n */\r\nfunction generate(observer) {\r\n    var mirror;\r\n    for (var i = 0, length = beforeDict.length; i < length; i++) {\r\n        if (beforeDict[i].obj === observer.object) {\r\n            mirror = beforeDict[i];\r\n            break;\r\n        }\r\n    }\r\n    _generate(mirror.value, observer.object, observer.patches, \"\");\r\n    if (observer.patches.length) {\r\n        core_1.applyPatch(mirror.value, observer.patches);\r\n    }\r\n    var temp = observer.patches;\r\n    if (temp.length > 0) {\r\n        observer.patches = [];\r\n        if (observer.callback) {\r\n            observer.callback(temp);\r\n        }\r\n    }\r\n    return temp;\r\n}\r\nexports.generate = generate;\r\n// Dirty check if obj is different from mirror, generate patches and update mirror\r\nfunction _generate(mirror, obj, patches, path) {\r\n    if (obj === mirror) {\r\n        return;\r\n    }\r\n    if (typeof obj.toJSON === \"function\") {\r\n        obj = obj.toJSON();\r\n    }\r\n    var newKeys = helpers_1._objectKeys(obj);\r\n    var oldKeys = helpers_1._objectKeys(mirror);\r\n    var changed = false;\r\n    var deleted = false;\r\n    //if ever \"move\" operation is implemented here, make sure this test runs OK: \"should not generate the same patch twice (move)\"\r\n    for (var t = oldKeys.length - 1; t >= 0; t--) {\r\n        var key = oldKeys[t];\r\n        var oldVal = mirror[key];\r\n        if (helpers_1.hasOwnProperty(obj, key) && !(obj[key] === undefined && oldVal !== undefined && Array.isArray(obj) === false)) {\r\n            var newVal = obj[key];\r\n            if (typeof oldVal == \"object\" && oldVal != null && typeof newVal == \"object\" && newVal != null) {\r\n                _generate(oldVal, newVal, patches, path + \"/\" + helpers_1.escapePathComponent(key));\r\n            }\r\n            else {\r\n                if (oldVal !== newVal) {\r\n                    changed = true;\r\n                    patches.push({ op: \"replace\", path: path + \"/\" + helpers_1.escapePathComponent(key), value: helpers_1._deepClone(newVal) });\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            patches.push({ op: \"remove\", path: path + \"/\" + helpers_1.escapePathComponent(key) });\r\n            deleted = true; // property has been deleted\r\n        }\r\n    }\r\n    if (!deleted && newKeys.length == oldKeys.length) {\r\n        return;\r\n    }\r\n    for (var t = 0; t < newKeys.length; t++) {\r\n        var key = newKeys[t];\r\n        if (!helpers_1.hasOwnProperty(mirror, key) && obj[key] !== undefined) {\r\n            patches.push({ op: \"add\", path: path + \"/\" + helpers_1.escapePathComponent(key), value: helpers_1._deepClone(obj[key]) });\r\n        }\r\n    }\r\n}\r\n/**\r\n * Create an array of patches from the differences in two objects\r\n */\r\nfunction compare(tree1, tree2) {\r\n    var patches = [];\r\n    _generate(tree1, tree2, patches, '');\r\n    return patches;\r\n}\r\nexports.compare = compare;\r\n","var __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\n/*!\r\n * https://github.com/Starcounter-Jack/JSON-Patch\r\n * (c) 2017 Joachim Wester\r\n * MIT license\r\n */\r\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\r\nfunction hasOwnProperty(obj, key) {\r\n    return _hasOwnProperty.call(obj, key);\r\n}\r\nexports.hasOwnProperty = hasOwnProperty;\r\nfunction _objectKeys(obj) {\r\n    if (Array.isArray(obj)) {\r\n        var keys = new Array(obj.length);\r\n        for (var k = 0; k < keys.length; k++) {\r\n            keys[k] = \"\" + k;\r\n        }\r\n        return keys;\r\n    }\r\n    if (Object.keys) {\r\n        return Object.keys(obj);\r\n    }\r\n    var keys = [];\r\n    for (var i in obj) {\r\n        if (hasOwnProperty(obj, i)) {\r\n            keys.push(i);\r\n        }\r\n    }\r\n    return keys;\r\n}\r\nexports._objectKeys = _objectKeys;\r\n;\r\n/**\r\n* Deeply clone the object.\r\n* https://jsperf.com/deep-copy-vs-json-stringify-json-parse/25 (recursiveDeepCopy)\r\n* @param  {any} obj value to clone\r\n* @return {any} cloned obj\r\n*/\r\nfunction _deepClone(obj) {\r\n    switch (typeof obj) {\r\n        case \"object\":\r\n            return JSON.parse(JSON.stringify(obj)); //Faster than ES5 clone - http://jsperf.com/deep-cloning-of-objects/5\r\n        case \"undefined\":\r\n            return null; //this is how JSON.stringify behaves for array items\r\n        default:\r\n            return obj; //no need to clone primitives\r\n    }\r\n}\r\nexports._deepClone = _deepClone;\r\n//3x faster than cached /^\\d+$/.test(str)\r\nfunction isInteger(str) {\r\n    var i = 0;\r\n    var len = str.length;\r\n    var charCode;\r\n    while (i < len) {\r\n        charCode = str.charCodeAt(i);\r\n        if (charCode >= 48 && charCode <= 57) {\r\n            i++;\r\n            continue;\r\n        }\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nexports.isInteger = isInteger;\r\n/**\r\n* Escapes a json pointer path\r\n* @param path The raw pointer\r\n* @return the Escaped path\r\n*/\r\nfunction escapePathComponent(path) {\r\n    if (path.indexOf('/') === -1 && path.indexOf('~') === -1)\r\n        return path;\r\n    return path.replace(/~/g, '~0').replace(/\\//g, '~1');\r\n}\r\nexports.escapePathComponent = escapePathComponent;\r\n/**\r\n * Unescapes a json pointer path\r\n * @param path The escaped pointer\r\n * @return The unescaped path\r\n */\r\nfunction unescapePathComponent(path) {\r\n    return path.replace(/~1/g, '/').replace(/~0/g, '~');\r\n}\r\nexports.unescapePathComponent = unescapePathComponent;\r\nfunction _getPathRecursive(root, obj) {\r\n    var found;\r\n    for (var key in root) {\r\n        if (hasOwnProperty(root, key)) {\r\n            if (root[key] === obj) {\r\n                return escapePathComponent(key) + '/';\r\n            }\r\n            else if (typeof root[key] === 'object') {\r\n                found = _getPathRecursive(root[key], obj);\r\n                if (found != '') {\r\n                    return escapePathComponent(key) + '/' + found;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return '';\r\n}\r\nexports._getPathRecursive = _getPathRecursive;\r\nfunction getPath(root, obj) {\r\n    if (root === obj) {\r\n        return '/';\r\n    }\r\n    var path = _getPathRecursive(root, obj);\r\n    if (path === '') {\r\n        throw new Error(\"Object not found in root\");\r\n    }\r\n    return '/' + path;\r\n}\r\nexports.getPath = getPath;\r\n/**\r\n* Recursively checks whether an object has any undefined values inside.\r\n*/\r\nfunction hasUndefined(obj) {\r\n    if (obj === undefined) {\r\n        return true;\r\n    }\r\n    if (obj) {\r\n        if (Array.isArray(obj)) {\r\n            for (var i = 0, len = obj.length; i < len; i++) {\r\n                if (hasUndefined(obj[i])) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        else if (typeof obj === \"object\") {\r\n            var objKeys = _objectKeys(obj);\r\n            var objKeysLength = objKeys.length;\r\n            for (var i = 0; i < objKeysLength; i++) {\r\n                if (hasUndefined(obj[objKeys[i]])) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\nexports.hasUndefined = hasUndefined;\r\nvar PatchError = (function (_super) {\r\n    __extends(PatchError, _super);\r\n    function PatchError(message, name, index, operation, tree) {\r\n        _super.call(this, message);\r\n        this.message = message;\r\n        this.name = name;\r\n        this.index = index;\r\n        this.operation = operation;\r\n        this.tree = tree;\r\n    }\r\n    return PatchError;\r\n}(Error));\r\nexports.PatchError = PatchError;\r\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n","'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n","const EndpointConfig = require('./endpoint-config.class.js');\nconst Endpoint = require('./endpoint.class.js');\nconst Cache = require('./cache.class');\nconst clone = require('./utils.class').clone;\n\n/**\n * Defines the base configuration for an API\n * @constructor\n */\nclass APIConfig {\n  constructor() {\n    this.config = { headers : {}, url : '' };\n    this.endpoints = {};\n    this.cache = new Cache();\n  }\n  /**\n   * Gets / Sets base api url\n   * @param {string=} url - Base url that this endpoint talks to\n   * @returns {(this|string)}\n   */\n  baseUrl(url) {\n    if ('undefined' !== typeof url) {\n      if ('string' === typeof url) {\n        this.config.url = url;\n      }\n      return this;\n    }\n    return this.config.url;\n  }\n  /**\n   * Creates a new endpoint\n   * @param {string} endpointName - The name that will be used to get this endpoint\n   * @returns {@link Endpoint} An instance of Endpoint\n   */\n  endpoint(endpointName = '__default__') {\n    let config = new EndpointConfig().api(this);\n    this[ endpointName ] = new Endpoint(config);\n    return this[ endpointName ];\n  }\n  /**\n   * Sets headers that all calls will use. Helpful for authentication\n   * @param {object=} headers - Key / value pairs of headers\n   * @returns {this | object}\n   */\n  commonHeaders(headers) {\n    if ('undefined' !== typeof headers) {\n      this.config.headers = headers;\n      return this;\n    } else {\n      return clone(this.config.headers);\n    }\n  }\n}\n\nmodule.exports = APIConfig;","/**\n * @constructor\n */\nclass Cache {\n  /**\n   * Create a cache object\n   */\n  constructor() {\n    this.objects = new Map();\n    this.config = {\n      ttl : 60000,\n    };\n  }\n  /**\n   * Fetches an object from the cache using the object's name (typically the url)\n   * @param {string} name \n   * @returns {(object|Array|undefined)} The found object or array if exists, otherwise undefined\n   */\n  get(name) {\n    let now = Date.now();\n    let obj = this.objects.get(name);\n    if ('undefined' !== typeof obj && now - obj[0] < this.config.ttl) {\n      let cachedObject = obj[1];\n      Object.defineProperty(cachedObject,'__fromCache', {value : true});\n      return cachedObject;\n    } else {\n      this.objects.delete(name); //in case the object exists but has expired\n      return undefined;\n    }\n  }\n  /**\n   * Stores any object or primitive into the cache using it's name\n   * NOTE: Primitives WILL be converted to objects prior to caching\n   * @param {string} name \n   * @param {(string|number|boolean|object)} value \n   * @returns {boolean} success\n   */\n  put(name, value) {\n    if ('string' !== typeof name) {\n      throw new Error('Invalid name attribute');\n    }\n    //convert primitive strings to string objects so we can add __fromCached\n    if ('string' === typeof value) {\n      value = new String(value); // jshint ignore:line\n    }\n    if ('number' === typeof value) {\n      value = new Number(value); // jshint ignore:line\n    }\n    if ('boolean' === typeof value) {\n      value = new Boolean(value); // jshint ignore:line      \n    }\n    this.objects.set(name, [Date.now(), value]);\n    return true;\n  }\n  /**\n   * Removes an object from the cache\n   * @param {string} name \n   */\n  invalidate(name) {\n    return this.objects.delete(name);\n  }\n  /**\n   * Changes the default time to live of objects in the cache\n   * @param {number} newTTL \n   * @returns {boolean} success\n   */\n  setTTL(newTTL) {\n    if ('number' !== typeof newTTL) {\n      throw new Error('Invalid TTL value');\n    }\n    this.config.ttl = newTTL;\n    return true;\n  }\n \n}\n\nmodule.exports = Cache;","const Model = require('./model.class');\nconst clone = require('./utils.class').clone;\n/**\n * @constructor\n */\nclass EndpointConfig {\n  constructor(config = {}) {\n    this.config = { api : {}};\n\n    let defaults = {\n      'url' : '/',\n      'responseType' : \"application/json\",\n      'instantiator' : Model\n    };\n    Object.assign(this.config, defaults, clone(config));\n  }\n\n  /**\n   * Gets or sets the expected media return type. Ultimately, it is up to the transport\n   * to use this setting to correctly talk to the api\n   * Note - This is currently unused\n   * @param {string=} newType - The new media type that this endpoint communicates with\n   */\n  mediaType(newType) {\n    if ('undefined' !== typeof newType) {\n      if ('string' === typeof newType) {\n        this.config.responseType = newType;\n      }\n      return this;\n    }\n    return this.config.responseType;\n  }\n\n  /**\n   * Gets / sets the API configuration object. This is needed so each\n   * endpoint can share common settings\n   * @param {APIConfig} config - The parent api configuration \n   * @returns {(this | object)}\n   */\n  api(config) {\n    if ('undefined' !== typeof config) {\n      if ('object' === typeof config && config !== null) {\n        this.config.api = clone(config);\n      }\n      return this;\n    }\n    return this.config.api;\n  }\n\n  /**\n   * Gets the base url from the underlying api configuration \n   * @returns {string} Current root url\n   */\n  baseUrl() {\n    if (!this.config.api || !this.config.api.baseUrl) {\n      return '';\n    }\n    return this.config.api.baseUrl();\n  }\n  /**\n   * Gets / sets the endpoint's relative url\n   * @param {string=} newUrl - Url to use for this endpoint\n   * @returns {(this | string)} This instance or the current url\n   */\n  url(newUrl) {\n    if ('undefined' !== typeof newUrl) {\n      if ('string' === typeof newUrl) {\n        this.config.url = newUrl;\n      }\n      return this;\n    }\n    return this.config.url;\n  }\n  /**\n   * Gets / sets the instantiator function to use when creating a new model. \n   * @param {(function|class)=} instantiator - the function or class to use for instantiation\n   * @returns {(this|function)} This instance or the current insantiation function \n   */\n  model(newFn) {\n    if ('undefined' !== typeof newFn) {\n      if ('function' === typeof newFn) {\n        this.config.instantiator = newFn;\n      }\n      return this;\n    }\n    return this.config.instantiator;\n  }\n\n}\n\nmodule.exports = EndpointConfig;","const URLBuilder = require('./url-builder.class');\nconst Request = require('./request.class');\nconst clone = require('./utils.class').clone;\nconst noop = require('./utils.class').noop;\n\n/**\n * Creates an endpoint instance\n * @constructor\n */\nclass Endpoint {\n  constructor(endpointConfig = {}) {\n    if (!endpointConfig || 'function' !== typeof endpointConfig.model) {\n      throw new Error('Invalid endpoint configuration.');\n    }\n    this.endpointConfig = clone(endpointConfig);\n    this.config = {\n      allowFromCache : true,\n      method : 'get',\n      target : '',\n      query : {}\n    };\n    this.cache = this.endpointConfig.api().cache;\n  }\n  /**\n   * Instantiates a new model instance and returns it\n   * @param {object=} data - Initialization data for the new model instance\n   * @returns {@link Model} New instance of Model\n   */\n  createNew(data = {}) {\n    let root = new URLBuilder([\n      this.endpointConfig.baseUrl(),\n      this.endpointConfig.url()\n    ]);\n    data['@root'] = root;\n    let instantiator = this.endpointConfig.model();\n    let instance = new instantiator(data);\n    instance.config(this.endpointConfig);\n    return instance;\n  }\n  /**\n   * Gets / sets instantiator to use when creating a new model instance. Instantiator *should* inherit\n   * from {@link Model}\n   * @param {(function|class)=} instantiator - Function or class to use when instantiating model\n   * @returns {(this|function)} Current instantiator function or this instance\n   */\n  model(instantiator) {\n    if ('undefined' !== typeof instantiator) {\n      this.endpointConfig.model(instantiator);\n      return this;\n    }\n    return this.endpointConfig.model();\n  }\n  /**\n   * Gets / sets the endpoint's relative url\n   * @param {string=} url - The new url value\n   * @returns {(this|string)} This instance or the current url\n   */\n  url(newUrl) {\n    if ('undefined' !== typeof newUrl) {\n      this.endpointConfig.url(newUrl);\n      return this;\n    }\n    return this.endpointConfig.url();\n  }\n  /**\n   * Builds a query to find an object with the specified identifier\n   * @param {string} id - the unique model identifier\n   * @returns {this}\n   */\n  findById(id) {\n    if ('string' !== typeof id) {\n      throw new Error('Invalid model identifier');\n    }\n    this.config.target = new URLBuilder([\n      this.endpointConfig.baseUrl(),\n      this.endpointConfig.url(),\n      id\n    ]);\n    this.config.method = 'get';\n    return this;\n  }\n  /**\n   * Creates a query to find objects that match the optional query\n   * @param {object=} query\n   * @returns {this}\n   */\n  find(query) {\n    this.config.target = new URLBuilder([\n      this.endpointConfig.baseUrl(),\n      this.endpointConfig.url()\n    ]);\n    this.config.method = 'get';\n    this.config.query.search = JSON.stringify(query);\n    return this;\n  }\n\n  /**\n    * At the moment, this behaves exactly the same as .find, but uses the\n    * SEARCH verb instead\n    * @param {object} query\n    * @returns {this}\n    */\n  search(query) {\n    this.config.target = new URLBuilder([\n      this.endpointConfig.baseUrl(),\n      this.endpointConfig.url()\n    ]);\n    this.config.method = 'search';\n    this.config.query.search = JSON.stringify(query);\n    return this;\n  }\n\n  /**\n   * Creates a query to find a unique model with the specified id\n   * and replaces it's data with the specified body object\n   * @param {string} id - the unique model identifier\n   * @param {object} body\n   * @returns {this}\n   */\n  findByIdAndUpdate(id, body) {\n    if ('string' !== typeof id) {\n      throw new Error('Invalid model identifier');\n    }\n    if ('object' !== typeof body) {\n      throw new Error('Invalid body object');\n    }\n    this.config.target = new URLBuilder([\n      this.endpointConfig.baseUrl(),\n      this.endpointConfig.url(),\n      id\n    ]);\n    this.config.body = body;\n    this.config.method = 'put';\n    return this;\n  }\n\n  /**\n   * Creates a query that finds a model with the specified id and\n   * removes it from the database\n   * @param {string} id - the unique model identifier\n   * @returns {this}\n   */\n  findByIdAndRemove(id) {\n    if ('string' !== typeof id) {\n      throw new Error('Invalid model identifier');\n    }\n    this.config.target = new URLBuilder([\n      this.endpointConfig.baseUrl(),\n      this.endpointConfig.url(),\n      id\n    ]);\n    this.config.method = 'delete';\n    return this;\n  }\n\n  /**\n   * Determines if the query request should allow objects from the cache\n   * or require objects be fresh from the api\n   * @param {boolean=} allow - Specify if using the cache is allowed\n   * @returns {(this | boolean)} This instance or the current allow value\n   */\n  allowFromCache(allow) {\n    if ('undefined' !== typeof allow) {\n      if ('boolean' === typeof allow) {\n        this.config.allowFromCache = allow;\n      }\n      return this;\n    }\n    return this.config.allowFromCache;\n  }\n\n  /**\n   * Runs the query that has been created using the find/findBy.. calls\n   * @param {function=} cb - Function to call on completion (success or failure)\n   * @returns {Promise}\n   */\n  exec(cb = noop) {\n    let allowFromCache = this.allowFromCache();\n    let modelConstructor = this.endpointConfig.model();\n    let endpointConfig = this.endpointConfig;\n\n    let headers = {};\n    try {\n      headers = this.endpointConfig.api().commonHeaders();\n    } catch(e) {\n      // console.error('Unable to get common headers. Something went\\'t wrong (unless you are unit testing). ');\n    }\n    Object.assign(headers, this.config.headers);\n\n    let request = new Request()\n      .method(this.config.method)\n      .body(this.config.body || {})\n      .query(this.config.query || {})\n      .headers(headers || {})\n      .url(this.config.target.toString());\n\n    let Promise = require('./settings').getPromise();\n\n    return new Promise((resolve, reject) => {\n      if (this.hasCache()) {\n        let cachedObject = cache.get(request.url());\n        if (cachedObject && allowFromCache) {\n          cb(null, cachedObject);\n          return resolve(cachedObject);\n        }\n      }\n      //do actual 'get'\n      request.exec().then(response => {\n        let data = response.data;\n        let model;\n\n        if (Array.isArray(data)) {\n          model = data.map((item) => {\n            let entry = new modelConstructor(item);\n            entry.config(endpointConfig);\n            Object.defineProperty(entry, '__request', { value : clone(request), enumerable : false });\n            return entry;\n          });\n        } else {\n          model = new modelConstructor(data);\n          model.config(endpointConfig);\n          Object.defineProperty(model, '__request', { value : clone(request), enumerable : false });\n        }\n\n        if (this.hasCache()) {\n          cache.put(request.url(), model);\n        }\n        cb(null, model);\n        return resolve(model);\n      }).catch(err => {\n        if (this.hasCache()) {\n          cache.invalidate(request.url());\n        }\n        cb(err);\n        return reject(err);\n      });\n    });\n  }\n  /**\n   * Query helper to skip records returned from the api (if supported). Combined\n   * with the .limit method, this function is great for pagination\n   * @param {number} skipAmount\n   * @returns this\n   */\n  skip(skipAmount = 0) {\n    if ('number' === typeof skipAmount) {\n      this.config.query.skip = skipAmount;\n    }\n    return this;\n  }\n /**\n  * Query helper to limit the number of results returned (provided the api\n  * supports it)\n  * @param {number} limitAmount\n  * @returns this\n  */\n  limit(limitAmount = 0) {\n    if ('number' === typeof limitAmount) {\n      this.config.query.limit = limitAmount;\n    }\n    return this;\n  }\n  /**\n   * Sets a list of fields to return from the api (if supported).\n   * @param {(string|string[])} fields - a list of fields to return from the api\n   * @returns this\n   */\n  select(fields = '') {\n    if (Array.isArray(fields)) {\n      fields = fields.join(' ');\n    }\n    if ('string' === typeof fields) {\n      this.config.query.fields = fields;\n    }\n    return this;\n  }\n\n  /**\n   * Checks to see if the cache object has been set and is valid\n   * @access private\n   * @returns {boolean}\n   */\n  hasCache() {\n    return this.cache && 'function' === typeof this.cache;\n  }\n}\n\nmodule.exports = Endpoint;\n","/**\n * @constructor\n */\nclass HTTPMock {\n\tconstructor(verbose = false) {\n\t\tthis.listeners = {};\n\t\tthis.verbose = verbose;\n\t}\n\t/**\n\t * Mock representation of the XMLHttpRequest open method\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/open}\n\t * @param {string} method \n\t * @param {string} url \n\t * @returns {undefined}\n\t */\n\topen(method, url) {\n\t\tthis.log(`Opening ${url} using ${method}`);\n\t}\n\t/**\n\t * Mock representation of the XMLHttpRequest send method\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/send}\n\t * @param {object} body \n\t * @returns {undefined}\n\t */\n\tsend(body) {\n\t\tthis.log(`Sending with ${body}`);\n\t\tif ('function' === typeof this.listeners.load) {\n\t\t\tlet mockResponse = {\n\t\t\t\tresponse : {'mock_response' : true, 'data' : ['obj1']},\n\t\t\t\tresponseText : \"{'mock_response' : true}\",\n\t\t\t\tstatus : 200,\n\t\t\t\tstatusText : '200',\n\t\t\t\tresponseURL : '/mock-call'\n\t\t\t};\n\t\t\tObject.assign(this, mockResponse);\n\t\t\tthis.listeners.load();\n\t\t}\n\t}\n\t/**\n\t * Mock representation of the XMLHttpRequest getAllResponseHeaders method\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders}\n\t * @returns {string} The mock headers\n\t */\n\tgetAllResponseHeaders() {\n\t\treturn \"Mock-Headers: true\";\n\t}\n\t/**\n\t * Representation of Javascript's addEventListener designed to hook into this\n\t * mock XMLHttpRequest object\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener}\n\t * @param {string} name - The name of the event to listen for\n\t * @param {function} callback - Function to call when event is triggered\n\t */\n\taddEventListener(name, callback) {\n\t\tthis.log(`${name} listener registered`);\n\t\tthis.listeners[name] = callback;\n\t}\n\t/**\n\t * Just a stub so we have a uniform interface between this and the real thing\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/setRequestHeader}\n\t * @param {string} header \n\t * @param {string} value \n\t */\n\tsetRequestHeader(header, value) {\n\t\treturn true;\n\t}\n\t/**\n\t * Helper function for logging status output based on this object's \n\t * verbosity settings (true/false)\n\t * @param {string} message \n\t */\n\tlog(message) {\n\t\tif (this.verbose === true) {\n\t\t\tconsole.log(message);\n\t\t}\n\t}\n}\n\nmodule.exports = HTTPMock;\n","const jsonpatch = require('fast-json-patch');\nconst clone = require('./utils.class').clone;\nconst noop = require('./utils.class').noop;\nconst Request = require('./request.class');\n\n/**\n * @constructor\n */\nclass Model {\n  constructor(data = {}) {\n    Object.defineProperty(this, '__config', {enumerable : false, writable : true});\n    Object.defineProperty(this, '__response', {enumerable : false, writable : true});\n    Object.defineProperty(this, '__original', {value : data, writable : true});\n    Object.defineProperty(this, '__revision', {value : Date.now(), writable : true});\n\n    Object.assign(this, clone(data));\n  }\n  /**\n   * Persists this model back to the api\n   * @param {function=} cb - Callback to invoke on completion (failure or success)\n   * @returns {Request}\n   */\n  save(cb = noop) {\n    let headers = {};\n    try {\n      headers = this.__config.api().commonHeaders();\n    } catch(e) {\n      //ignore\n    }\n\n    let method = this.id ? 'put' : 'post';\n    let instance = this;\n\n    let request = new Request()\n      .url(this.makeHref())\n      .method(method)\n      .headers(headers)\n      .body(this)\n      .exec()\n      .then((response) => {\n        Object.assign(instance, clone(response.data));\n        instance.__revision = Date.now();\n        instance.__response = response;\n        instance.makeClean();\n        cb();\n        return instance;\n      }).catch(err => {\n        cb(err);\n        throw err;\n      });\n\n    return request;\n  }\n\n  /**\n   * Gets a list of changes that have occured since the last get/save\n   * @returns {Request}\n   */\n  changes() {\n    let headers = this.__config.api().commonHeaders();\n    let targetUrl = this['@changes'];\n    let request = new Request()\n      .url(targetUrl)\n      .query({search : {since : this.__revision}})\n      .method('get')\n      .headers(headers)\n      .exec();\n    return request;\n  }\n\n  /**\n   * Starts listening for changes and calls onChange whenever they are detected\n   * @param {function} onChange - Function to call when changes detected\n   * @param {number} refreshRate - the duration (in milliseconds) between checks\n   * @returns {this}\n   */\n  subscribe(onChange, ttl = 3000) {\n    setInterval(() => {\n      this.changes().then(changeList => {\n        if (changeList && changeList.length) {\n          this.__revision = Date.now();\n          onChange(changeList, Date.now());\n        }\n      });\n    },ttl);\n\n    return this;\n  }\n\n  /**\n   * Puts only the changes (in patch notation) back to the api. The\n   * server-side endpoint must support PATCH\n   * @returns {Request}\n   */\n  update() {\n    //use patch\n    let headers = this.__config.api().commonHeaders();\n\n    let patches = this.getDiffs();\n    let targetUrl = this.makeHref();\n    let instance = this;\n    let request = new Request()\n      .url(targetUrl)\n      .method('patch')\n      .headers(headers)\n      .body(patches)\n      .exec()\n      .then((response) => {\n        Object.assign(instance, clone(response.data));\n        instance.__revision = Date.now();\n        instance.__response = response;\n        instance.makeClean();\n      });\n    return request;\n  }\n\n  /**\n   * Sets the underlying API config\n   * @param {EndpointConfig} endpointConfig\n   */\n  config(endpointConfig = {}) {\n    this.__config = endpointConfig;\n  }\n\n  makeHref() {\n    let correctHref;\n    if ('object' === typeof this.__config) {\n      correctHref = this.__config.baseUrl() + '/' + this.__config.url() + '/';\n      if ('string' === typeof this.id ) {\n        correctHref += this.id;\n      }\n    } else {\n      correctHref = '/__unit_test__';\n    }\n    return correctHref;\n  }\n\n  /**\n   * Returns a list of diffs comparing this version to the last\n   * synced version from the server\n   * @private\n   * @returns {object[]} Array of changes\n   */\n  getDiffs() {\n    return jsonpatch.compare(this.__original, this);\n  }\n  /**\n   * Returns the current status of this model\n   * @returns {boolean}\n   */\n  isDirty() {\n    return this.getDiffs().length > 0;\n  }\n  /**\n   * Clears out the change history and syncs the underlying original version\n   * to the current version\n   * @returns {undefined}\n   */\n  makeClean() {\n    this.__original = clone(this);\n  }\n\n  /**\n   * Removes this modal from the api\n   * @param {function=} cb - Function to call on completetion (success or failure)\n   * @returns {Request}\n   */\n  remove(cb = noop) {\n    let headers = {};\n    try {\n      headers = this.__config.api().commonHeaders();\n    } catch(e) {}\n\n    let targetUrl = this.makeHref();\n    let instance = this;\n\n    let request = new Request()\n      .url(targetUrl)\n      .method('delete')\n      .headers(headers)\n      .exec()\n      .then((response) => {\n        instance.__response = response;\n        return cb();\n      }).catch(err => {\n        cb(err);\n        throw err;\n      });\n    return request;\n  }\n\n}\n\nmodule.exports = Model;\n","const Transport = require('./transport.class.js');\nconst clone = require('./utils.class').clone;\n\n/**\n * @constructor\n * @param {object=} config\n */\nclass Request {\n  constructor(config = {}) {\n    var defaults = {\n      method: 'GET',\n      url: '/',\n      headers: {},\n      data: undefined,\n      responseType : 'application/json',\n      params : {}\n    };\n    this.config = {};\n    Object.assign(this.config, defaults, config);\n  }\n  /**\n   * Executes the current request using the underlying transport mechanism (ie http)\n   * @returns {Promise}\n   */\n  exec() {\n    let originalRequest = this;\n    let Promise = require('./settings').getPromise();\n    return new Promise((resolve, reject) => {\n      originalRequest.transport = new Transport(originalRequest);\n\n      originalRequest.transport\n      .exec()\n      .then(function successCallback(response) {\n        response.data = clone(response.response);\n        // originalRequest.response = response;\n        response.request = originalRequest;\n        return resolve(response);\n      }, function errorCallback(response) {\n        // originalRequest.response = response;\n        response.request = originalRequest;        \n        return reject(response);\n      });\n    });\n  }\n  /**\n   * Gets / sets the query object to use\n   * @param {object=} newQuery \n   * @returns {(this | object)}\n   */\n  query(newQuery) {\n    if ('undefined' !== typeof newQuery) {\n      if ('object' === typeof newQuery && newQuery !== null) {\n        newQuery = clone(newQuery);\n      }\n      this.config.params = newQuery;\n      return this;\n    } else {\n      return this.config.params;\n    }\n  }\n  \n  /**\n   * Gets / sets the http verb (method) to use (ie get,put,post, etc)\n   * @param {string=} newMethod \n   * @returns {(this | string)}\n   */\n  method(newMethod) {\n    if ('undefined' !== typeof newMethod) {\n      if ('string' === typeof newMethod) {\n        this.config.method = newMethod;\n      }\n      return this;\n    } else {\n      return this.config.method;\n    }\n  }\n  \n  /**\n   * Gets / sets the target url to make the request to\n   * @param {string=} newUrl \n   * @returns {(this | string)}\n   */\n  url(newUrl) {\n    if ('undefined' !== typeof newUrl) {\n      if ('string' === typeof newUrl) {\n        this.config.url = newUrl;\n      }\n      return this;\n    } else {\n      return this.config.url;\n    }\n  }\n\n  /**\n   * Gets / sets headers (key / value pairs ) to use for the request\n   * @param {object=} newHeaderObj \n   * @returns {(this | object)}\n   */\n  headers(newHeaderObj) {\n    if ('undefined' !== typeof newHeaderObj) {\n      if ('object' === typeof newHeaderObj && newHeaderObj !== null) {\n        this.config.headers = clone(newHeaderObj);\n      }\n      return this;\n    } else {\n      return this.config.headers;\n    }\n  }\n\n  /**\n   * Gets / sets the request body\n   * @param {object=} newBody \n   * @returns {(this | object | undefined)}\n   */\n  body(newBody) {\n    if ('undefined' !== typeof newBody) {\n      if ('object' === typeof newBody && newBody !== null) {\n        this.config.data = clone(newBody);\n      }\n      return this;\n    } else {\n      return this.config.data;\n    }\n  }\n  /**\n   * Gets or sets the response type for the request\n   * @param {string=} newType \n   * @returns {(this | string)}\n   */\n  mediaType(newType) {\n    if ('undefined' !== typeof newType) {\n      if ('string' === typeof newType) {\n        this.config.responseType = newType;\n      }\n      return this;\n    }\n    return this.config.responseType;\n  }\n\n  /**\n   * Returns a copy of this request's configurations\n   * @returns {object}\n   */\n  toJSON() {\n    return JSON.parse( JSON.stringify(this.config) );\n  }\n}\n\nmodule.exports = Request;\n","/**\n * Reference point for all of the sdk modules to find common\n * settings, such as what promise to use\n * @singleton\n * @namespace OfficeBotSDK.Settings\n */\nlet settings = {\n  _p : Promise,\n  setPromiseLib : function(p) {\n    this._p = p;\n  },\n  getPromise : function() {\n    return this._p;\n  }\n};\n\nmodule.exports = settings;","const clone = require('./utils.class').clone;\nconst querystring = require('querystring');\n\n/**\n * @constructor\n */\nclass Transport {\n\tconstructor(request) {\n\t\tif ('undefined' !== typeof window && window.XMLHttpRequest) {\n\t\t\tthis.HTTPRequest = window.XMLHttpRequest;\n\t\t} else {\n\t\t\tthis.HTTPRequest = require('./http-mock.class.js'); //used for Node based tests\n\t\t}\n\t\tthis.setRequest(request);\n\t}\n\t/**\n\t * Stores the request object for use later (ie when .exec() gets called). Helpfull \n\t * if building the transport request up instead of passing everything into constructor.\n\t * @param {Request} request \n\t * @returns {this}\n\t */\n\tsetRequest(request) {\n\t\tthis.request = clone(request);\n\t\treturn this;\n\t}\n\t/**\n\t * Makes the actual api call using the Request object that was passed into the constructor \n\t * or added using the setRequest method.\n\t * @returns {Promise}\n\t */\n\texec() {\n\t\tlet Promise = require('./settings').getPromise();\t\t\n\t\tlet instance = this;\n\t\t\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t\n\t\t\tlet httpInstance = new instance.HTTPRequest();\n\t\t\tlet url = instance.request.url() ;\n\n\t\t\tlet query = querystring.stringify(instance.request.query());\n\t\t\tif (query && query.length) {\n\t\t\t\turl = url + '?' + query;\n\t\t\t}\n\t\t\tlet body = instance.request.body();\n\t\t\tif ('object' === typeof body) {\n\t\t\t\tbody = JSON.stringify(body);\n\t\t\t}\n\t\t\t\n\t\t\thttpInstance.addEventListener(\"load\", transferComplete);\n\t\t\thttpInstance.addEventListener(\"error\", transferFailed);\n\t\t\thttpInstance.addEventListener(\"abort\", transferAborted);\n\t\t\thttpInstance.open( instance.request.method().toUpperCase(), url );\n\t\t\thttpInstance.responseType = 'json';\n\t\t\t\n\t\t\tlet headers = instance.request.headers();\n\t\t\thttpInstance.setRequestHeader(\"Content-Type\", instance.request.mediaType());\t\n\t\t\t\n\t\t\tfor ( let headerName in headers ) {\n\t\t\t\thttpInstance.setRequestHeader(headerName, headers[headerName]);\n\t\t\t}\n\t\t\thttpInstance.send( body );\n\n\t\t\t/**\n\t\t\t\t* Handler:Aborted\n\t\t\t\t*/\n\t\t\tfunction transferAborted() {\n\t\t\t\tlet failed = new Error('Transfer cancelled.');\n\t\t\t\treject(failed);\n\t\t\t}\n\t\t\t/**\n\t\t\t\t* Handler:Failed\n\t\t\t\t*/\n\t\t\tfunction transferFailed(e) {\n\t\t\t\treject(httpInstance);\n\t\t\t}\n\t\t\t/**\n\t\t\t\t* Handler:Finished\n\t\t\t\t*/\n\t\t\tfunction transferComplete() {\t\n\t\t\t\tif (httpInstance.status < 400) {\n\t\t\t\t\tresolve(httpInstance);\n\t\t\t\t} else {\n\t\t\t\t\treject(httpInstance);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nmodule.exports = Transport;\n","/**\n * @constructor\n * @param {string[]} args \n */\nclass URLBuilder {\n  constructor(args = []) {\n    if (!args || 'function' !== typeof args.join) {\n      throw new Error('URL Builder requires param 1 to be an array.');\n    }\n    this.target = args.filter(item => {\n      return item !== '/';\n    }).join('/') || \"/\";\n  }\n  /**\n   * @returns {string} url\n   */\n  toString() {\n    return this.target || '';\n  }\n}\n\nmodule.exports = URLBuilder;","var clone_lib = require('clone');\n\n/**\n * @constructor\n */\nclass Utils {\n    constructor() {\n\n    }\n    /**\n     * Does nothing\n     * @returns {undefined}\n     */\n    static noop() {\n\n    }\n\n    /**\n     * Creates a deep copy of the passed in object\n     * @param {object} obj - Object to copy\n     * @returns {object} Copied object\n     */\n    static clone(obj) {\n        return obj;\n        // return clone_lib(obj);\n        // return privateClone(obj);\n    }\n}\n/**\n * Allows our static method to call this recursively\n * @param {object} obj\n * @private\n * @returns {object} Copied object \n */\nfunction privateClone(obj) {\n   if(obj === null || typeof(obj) != 'object') {\n      return obj;\n   }\n   var temp = new obj.constructor();\n   for(var key in obj) {\n      temp[key] = privateClone(obj[key]);\n   }\n   return temp;\n}\n\nmodule.exports = Utils;"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}